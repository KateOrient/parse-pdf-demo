{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","test_2.pdf","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","uploadInputRef","drawOnPageRenderSuccess","page","getOperatorList","then","data","positionData","argsArray","length","console","log","canvas","document","getElementsByTagName","pageIndex","rect","getBoundingClientRect","div","createElement","innerHTML","style","top","y","left","x","height","width","position","className","getElementById","appendChild","_","map","mcid","child","parseInt","border","pdfjs","GlobalWorkerOptions","workerSrc","App","props","onDocumentLoadSuccess","getMetadata","info","title","metadata","contentDispositionFilename","Title","state","pdf","name","setState","numPages","onPageRenderSuccess","boundingBoxes","renderedPages","uploadFile","file","target","files","reader","FileReader","onload","_onUploadEnd","readAsArrayBuffer","uploadPdf","click","pageNumber","testPdf","this","node","onClick","type","onChange","bind","ref","_setRef","onLoadSuccess","options","cMapUrl","version","cMapPacked","pagesArray","i","push","key","renderAnnotationLayer","renderInteractiveForms","renderTextLayer","onRenderSuccess","customTextRenderer","transform","scale","str","Pages","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d39ff8cd.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","module.exports = __webpack_public_path__ + \"static/media/test_2.abc38450.pdf\";","import React from 'react';\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\r\nimport './App.css';\r\nimport testPdf from './test_2.pdf';\r\nimport _ from 'lodash';\r\n\r\n//  Set pdf.js build\r\npdfjs.GlobalWorkerOptions.workerSrc = `pdf.worker.js`;\r\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n\r\nlet uploadInputRef;\r\n\r\n\r\nfunction drawOnPageRenderSuccess(page) {\r\n    page.getOperatorList().then((data) => {\r\n        let positionData = data.argsArray[data.argsArray.length - 1][0];\r\n        console.log('Data:', positionData);\r\n\r\n        let canvas = document.getElementsByTagName('canvas')[page.pageIndex];\r\n        let rect = canvas.getBoundingClientRect();\r\n\r\n        let div = document.createElement('div');\r\n        div.innerHTML = \"\";\r\n        div.style.top = rect.y + 'px';\r\n        div.style.left = rect.x + 'px';\r\n        div.style.height = rect.height + 'px';\r\n        div.style.width = rect.width + 'px';\r\n        div.style.position = 'absolute';\r\n        div.id = 'div' + page.pageIndex;\r\n        div.className = 'bbox-container';\r\n        document.getElementById('container').appendChild(div);\r\n\r\n        div = document.getElementById('div' + page.pageIndex);\r\n        _.map(positionData, (position, mcid) => {\r\n            let child = document.createElement('div');\r\n            child.style.top = parseInt(canvas.style.height, 10) - position.y - position.height  + 'px';\r\n            child.style.left = position.x + 'px';\r\n            child.style.height = position.height + 'px';\r\n            child.style.width = position.width + 'px';\r\n            child.style.border = '1px solid red';\r\n            child.style.position = 'absolute';\r\n            child.id = mcid;\r\n            div.appendChild(child);\r\n        })\r\n    });\r\n}\r\n\r\n\r\nfunction Pages({ numPages, onPageRenderSuccess }) {\r\n    let pagesArray = [];\r\n\r\n    for (let i = 1; i <= numPages; i++) {\r\n        pagesArray.push(\r\n            <Page className=\"pdf-page\"\r\n                  pageNumber={i}\r\n                  key={`page-${i}`}\r\n                  renderAnnotationLayer={true}\r\n                  renderInteractiveForms={true}\r\n                  renderTextLayer={true}\r\n                  onRenderSuccess={drawOnPageRenderSuccess}\r\n                  customTextRenderer={({height,  width, transform, scale, page, str}) => {\r\n                      /*\r\n                      height: height of text\r\n                      width: width of text\r\n                      transform: contain coordinates of text\r\n                      scale: will be used for coords. conversing\r\n                       */\r\n                      return str;\r\n                  }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return pagesArray;\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf: testPdf,\r\n            title: testPdf.name,\r\n            boundingBoxes: null,\r\n            renderedPages: 0\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.renderedPages === this.state.numPages) {\r\n            console.log('BBoxes', this.state.boundingBoxes);\r\n            this.setState({renderedPages: 0});\r\n        }\r\n    }\r\n\r\n    onDocumentLoadSuccess = (document) => {\r\n        console.log(document);\r\n\r\n        document.getMetadata().then(({ info, metadata, contentDispositionFilename, }) => {\r\n            let title = info.Title || this.state.pdf.name;\r\n            this.setState({\r\n                title,\r\n            })\r\n        });\r\n        let {numPages} = document;\r\n        this.setState({ numPages });\r\n    };\r\n\r\n    onPageRenderSuccess = (page) => {\r\n        page.getOperatorList().then(data => {\r\n            let boundingBoxes = data.argsArray[data.argsArray.length - 1][0];\r\n            this.setState({\r\n                boundingBoxes:\r\n                    this.state.boundingBoxes && this.state.renderedPages !== 0  ?\r\n                        {...this.state.boundingBoxes, ...boundingBoxes} : boundingBoxes,\r\n                renderedPages: this.state.renderedPages + 1\r\n            })\r\n        });\r\n    };\r\n\r\n    uploadFile = (e) => {\r\n        let file = e.target.files[0];\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = this._onUploadEnd(file);\r\n\r\n        if (!file) {\r\n            this.setState({\r\n                pdf: null\r\n            });\r\n            return;\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    uploadPdf = () => {\r\n        uploadInputRef.click();\r\n    }\r\n\r\n    _onUploadEnd = (pdf) => {\r\n        document.getElementById('container').innerHTML = \"\";\r\n\r\n        this.setState({\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf\r\n        })\r\n    }\r\n\r\n    _setRef(node) {\r\n        uploadInputRef = node;\r\n    }\r\n\r\n    render() {\r\n        const { pageNumber, numPages, title } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <button onClick={this.uploadPdf}>\r\n                        Upload other pdf\r\n                    </button>\r\n                    <input type='file' onChange={this.uploadFile.bind(this)} ref={this._setRef} style={{'display': 'none'}}/>\r\n                </header>\r\n                <article className=\"app-main-body\">\r\n                    <div className=\"pdf-data\">\r\n                        <p><b>Title: </b>{title}</p>\r\n                        <p><b>Number of pages: </b>{numPages}</p>\r\n                    </div>\r\n                    <div className=\"pdf-wrapper\">\r\n                        <Document file={this.state.pdf}\r\n                                  onLoadSuccess={this.onDocumentLoadSuccess}\r\n                                  options={{\r\n                                      cMapUrl: `//cdn.jsdelivr.net/npm/pdfjs-dist@${pdfjs.version}/cmaps/`,\r\n                                      cMapPacked: true,\r\n                                  }}\r\n                        >\r\n                            {Pages({ pageNumber, numPages, onPageRenderSuccess: this.onPageRenderSuccess })}\r\n                        </Document>\r\n                    </div>\r\n                </article>\r\n                <div id='container'/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}