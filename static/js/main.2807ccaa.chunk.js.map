{"version":3,"sources":["../node_modules/pdfjs-dist/build sync","demo_tags.pdf","App.js","serviceWorker.js","index.js"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","uploadInputRef","containerRef","pdfjs","GlobalWorkerOptions","workerSrc","App","props","onDocumentLoadSuccess","document","console","log","structureTree","_pdfInfo","getMetadata","then","info","RoleMap","metadata","contentDispositionFilename","ClassMap","title","Title","state","pdf","name","setState","roleMap","classMap","numPages","onPageRenderSuccess","page","getOperatorList","data","positionData","argsArray","length","canvas","getElementsByTagName","pageIndex","rect","getBoundingClientRect","div","createElement","innerHTML","style","top","y","left","x","height","width","position","appendChild","getElementById","_","map","mcid","child","parseInt","className","setAttribute","onmouseover","onBboxOver","onmouseout","onBboxOut","target","getAttribute","getTagName","relatives","path","tagRoleMapPath","forEach","elementMcid","querySelector","classList","add","activeTagName","tagPath","join","querySelectorAll","el","remove","uploadFile","file","files","reader","FileReader","onload","_onUploadEnd","readAsArrayBuffer","uploadPdf","click","pageNumber","onError","error","message","testPdf","boundingBoxes","renderedPages","this","tagNode","node","Object","nodeName","Array","includes","getRelatives","filter","nodeFromArray","arrayOfRelatives","relative","push","entries","onClick","type","onChange","bind","ref","_setRef","onLoadSuccess","options","cMapUrl","version","cMapPacked","onLoadError","pagesArray","i","key","renderAnnotationLayer","renderInteractiveForms","renderTextLayer","onRenderSuccess","customTextRenderer","transform","scale","str","Pages","setContainerRef","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4GAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,I,mBCRzBF,EAAOC,QAAU,IAA0B,uC,wNCYvCE,EACAC,E,iJALJC,QAAMC,oBAAoBC,UAA1B,gB,IAsTeC,E,YAlRX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAyBVC,sBAAwB,SAACC,GACrBC,QAAQC,IAAIF,GACZ,IAAIG,EAAgBH,EAASI,SAASD,eAAiB,GACvDH,EAASK,cAAcC,KAAK,YAAsD,IAAnDC,EAAkD,EAAlDA,KACrBC,GADuE,EAA5CC,SAA4C,EAAlCC,2BACRH,EAA7BC,SAASG,EAAoBJ,EAApBI,SACXC,EAD+BL,EAAVM,OACJ,EAAKC,MAAMC,IAAIC,KACpC,EAAKC,SAAS,CACVL,QACAT,gBACAe,QAASV,GAAW,GACpBW,SAAUR,GAAY,OAVI,IAa7BS,EAAYpB,EAAZoB,SACL,EAAKH,SAAS,CAAEG,cAxCD,EA2CnBC,oBAAsB,SAACC,GAWnBA,EAAKC,kBAAkBjB,KAAK,SAACkB,GACzB,IAAIC,EAAeD,EAAKE,UAAUF,EAAKE,UAAUC,OAAS,GAC1D1B,QAAQC,IAAI,QAASuB,GAErB,IAAIG,EAAS5B,SAAS6B,qBAAqB,UAAUP,EAAKQ,WACtDC,EAAOH,EAAOI,wBAEdC,EAAMjC,SAASkC,cAAc,OACjCD,EAAIE,UAAY,GAChBF,EAAIG,MAAMC,IAAMN,EAAKO,EAAI,KACzBL,EAAIG,MAAMG,KAAOR,EAAKS,EAAI,KAC1BP,EAAIG,MAAMK,OAASV,EAAKU,OAAS,KACjCR,EAAIG,MAAMM,MAAQX,EAAKW,MAAQ,KAC/BT,EAAIG,MAAMO,SAAW,WACrBV,EAAI1C,GAAK,MAAQ+B,EAAKQ,UACtBrC,EAAamD,YAAYX,GAEzBA,EAAMjC,SAAS6C,eAAe,MAAQvB,EAAKQ,WAC3CgB,IAAEC,IAAItB,EAAc,SAACkB,EAAUK,GAC3B,IAAIC,EAAQjD,SAASkC,cAAc,OACnCe,EAAMb,MAAMC,IAAMa,SAAStB,EAAOQ,MAAMK,OAAQ,IAAME,EAASL,EAAIK,EAASF,OAAU,KACtFQ,EAAMb,MAAMG,KAAOI,EAASH,EAAI,KAChCS,EAAMb,MAAMK,OAASE,EAASF,OAAS,KACvCQ,EAAMb,MAAMM,MAAQC,EAASD,MAAQ,KACrCO,EAAME,UAAY,OAClBF,EAAMG,aAAa,YAAaJ,GACnCC,EAAMrC,MAAQoC,EACXC,EAAMI,YAAc,EAAKC,WACzBL,EAAMM,WAAc,EAAKC,UACzBvB,EAAIW,YAAYK,QAnFT,EAwFnBK,WAAa,SAACtE,GACV,IAAIgE,EAAOE,SAASlE,EAAEyE,OAAOC,aAAa,cAD1B,EAEgB,EAAKC,WAAWX,GAA1ChC,EAFU,EAEVA,KAAM4C,EAFI,EAEJA,UAAWC,EAFP,EAEOA,KAEnBC,EAAiB,GADH9E,EAAEyE,OAAOC,aAAa,kBAGpC1E,EAAEyE,OAAOL,aAAa,gBAAiBpC,GAG3C4C,EAAUG,QAAQ,SAACC,GACfhE,SAASiE,cAAT,sBAAsCD,EAAtC,OAAuDE,UAAUC,IAAI,cAGzEnF,EAAEyE,OAAOS,UAAUC,IAAI,YAEnB,EAAKrD,MAAMI,QAAQF,KACnB8C,EAAiB,MAAQ,EAAKhD,MAAMI,QAAQF,GAAMA,MAGtD,EAAKC,SAAS,CACVmD,cAAc,GAAD,OAAKpD,EAAL,YAAa8C,GAC1BO,QAASR,EAAKS,KAAK,WA7GR,EAiHnBd,UAAY,SAACxE,GACT,YAAIgB,SAASuE,iBAAiB,cAAcR,QAAQ,SAACS,GACjDA,EAAGN,UAAUO,OAAO,cAGxB,EAAKxD,SAAS,CACVmD,cAAe,GACfC,QAAS,MAxHE,EA2LnBK,WAAa,SAAC1F,GACV,IAAI2F,EAAO3F,EAAEyE,OAAOmB,MAAM,GACtBC,EAAS,IAAIC,WAEjBD,EAAOE,OAAS,EAAKC,aAAaL,GAE7BA,EAMLE,EAAOI,kBAAkBN,GALrB,EAAK1D,SAAS,CACVF,IAAK,QAnME,EA0MnBmE,UAAY,WACR1F,EAAe2F,SA3MA,EA8MnBH,aAAe,SAACjE,GACZf,SAAS6C,eAAe,aAAaV,UAAY,GAEjD,EAAKlB,SAAS,CACVG,SAAU,KACVgE,WAAY,EACZrE,SApNW,EAgOnBsE,QAAU,SAACrG,GACP,EAAKiC,SAAS,CACXqE,MAAOtG,EAAEuG,WA/NZ,EAAKzE,MAAQ,CACTM,SAAU,KACVgE,WAAY,EACZrE,IAAKyE,IACL5E,MAAO4E,IAAQxE,KACfyE,cAAe,KACfC,cAAe,EACfJ,MAAO,KACPnF,cAAe,GACfe,QAAS,GACTC,SAAU,GACViD,cAAe,KACfC,QAAS,MAfE,E,kFAoBXsB,KAAK7E,MAAM4E,gBAAkBC,KAAK7E,MAAMM,WACxCnB,QAAQC,IAAI,SAAUyF,KAAK7E,MAAM2E,eACjCE,KAAK1E,SAAS,CAACyE,cAAe,O,iCAsG3B1C,GAA2C,IAAD,OAApC4C,EAAoC,uDAA1BD,KAAK7E,MAAMX,cAC9B0F,EAAO,GACPjC,EAAY,GACZC,EAAO,GA+BX,OA9BAiC,OAAO3G,KAAKyG,GAAS7B,QAAQ,SAACgC,GAC1BlC,EAAO,CAACkC,GACJH,EAAQG,KAAc/C,EACtB6C,EAAOE,EACAH,EAAQG,aAAqBC,MAChCJ,EAAQG,GAAUE,SAASjD,IAC3B6C,EAAOE,EACPnC,EAAY,EAAKsC,aAAaN,EAAQG,MAEtCF,EAAOD,EAAQG,GAAUI,OAAO,SAACC,GAC7B,QAAKA,KAGI,EAAKzC,WAAWX,EAAMoD,GAAepF,OAC/C,MAEC6E,EAAO,EAAKlC,WAAWX,EAAM6C,GAC7BjC,EAAYiC,EAAKjC,UACjBC,EAAI,sBAAOA,GAAP,YAAgBgC,EAAKhC,OACzBgC,EAAOA,EAAK7E,MAGb4E,EAAQG,aAAqBD,SACpCD,EAAO,EAAKlC,WAAWX,EAAM4C,EAAQG,IACrCnC,EAAYiC,EAAKjC,UACjBC,EAAI,sBAAOA,GAAP,YAAgBgC,EAAKhC,OACzBgC,EAAOA,EAAK7E,QAIb,CACHA,KAAM6E,EACNjC,YACAC,U,mCAIKwC,GAAmB,IAAD,OACvBzC,EAAY,GAkBhB,OAjBAyC,EAAiBtC,QAAQ,SAACuC,GACjBA,IACmB,kBAAbA,EACP1C,EAAU2C,KAAKD,GACRA,aAAoBN,OAASM,EAAS3E,OAC7CiC,EAAS,sBACFA,GADE,YAEF,EAAKsC,aAAaI,KAElBA,aAAoBR,SAC3BlC,EAAS,sBACFA,GADE,YAEF,EAAKsC,aAAaJ,OAAOU,QAAQF,UAKzC1C,I,8BAgCHiC,GACJrG,EAAiBqG,I,sCAGLA,GACZpG,EAAeoG,I,+BAST,IAAD,EACmCF,KAAK7E,MAArCsE,EADH,EACGA,WAAYhE,EADf,EACeA,SAAUR,EADzB,EACyBA,MAE9B,OACI,yBAAKuC,UAAU,OACX,4BAAQA,UAAU,cACd,4BAAQsD,QAASd,KAAKT,WAAtB,oBAGA,2BAAOwB,KAAK,OAAOC,SAAUhB,KAAKjB,WAAWkC,KAAKjB,MAAOkB,IAAKlB,KAAKmB,QAAS1E,MAAO,CAAC,QAAW,WAEnG,6BAASe,UAAU,iBACf,yBAAKA,UAAU,YACX,2BAAG,sCAAevC,GAClB,2BAAG,gDAAyBQ,IAEhC,yBAAK+B,UAAU,eACX,kBAAC,WAAD,CAAUwB,KAAMgB,KAAK7E,MAAMC,IACjBgG,cAAepB,KAAK5F,sBACpBiH,QAAS,CACLC,QAAQ,qCAAD,OAAuCvH,QAAMwH,QAA7C,WACPC,YAAY,GAEhBC,YAAazB,KAAKN,QAClBC,MAAO,yBAAKnC,UAAU,aAAawC,KAAK7E,MAAMwE,QA3RhF,YAGI,IAH+C,IAAlClE,EAAiC,EAAjCA,SAAUC,EAAuB,EAAvBA,oBACnBgG,EAAa,GAERC,EAAI,EAAGA,GAAKlG,EAAUkG,IAC3BD,EAAWd,KACP,kBAAC,OAAD,CAAMpD,UAAU,WACViC,WAAYkC,EACZC,IAAG,eAAUD,GACbE,uBAAuB,EACvBC,wBAAwB,EACxBC,iBAAiB,EACjBC,gBAAiBtG,EACjBuG,mBAAoB,YAAmD,EAAjDnF,OAAiD,EAAxCC,MAAwC,EAAjCmF,UAAiC,EAAtBC,MAAsB,EAAfxG,KAOpD,OAPmE,EAATyG,QAa5E,OAAOV,EAoQkBW,CAAM,CAAE5C,aAAYhE,WAAUC,oBAAqBsE,KAAKtE,yBAIrE,yBAAK9B,GAAG,YAAYsH,IAAKlB,KAAKsC,kBAC9B,yBAAK1I,GAAG,WACJ,6BACI,0BAAM4D,UAAU,kBAAhB,cAAmDwC,KAAK7E,MAAMsD,eAElE,6BACI,0BAAMjB,UAAU,kBAAhB,eAAoDwC,KAAK7E,MAAMuD,e,GA3QrE6D,IAAMC,WC/BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1I,SAAS6C,eAAe,SD2H3C,kBAAmB8F,WACrBA,UAAUC,cAAcC,MAAMvI,KAAK,SAAAwI,GACjCA,EAAaC,iB","file":"static/js/main.2807ccaa.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 22;","module.exports = __webpack_public_path__ + \"static/media/demo_tags.a5053dd1.pdf\";","import React from 'react';\r\nimport { Document, Page, pdfjs } from \"react-pdf\";\r\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\r\nimport './App.css';\r\nimport testPdf from './demo_tags.pdf';\r\nimport _ from 'lodash';\r\n\r\n//  Set pdf.js build\r\npdfjs.GlobalWorkerOptions.workerSrc = `pdf.worker.js`;\r\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n\r\nlet uploadInputRef;\r\nlet containerRef;\r\n\r\nfunction Pages({ numPages, onPageRenderSuccess }) {\r\n    let pagesArray = [];\r\n\r\n    for (let i = 1; i <= numPages; i++) {\r\n        pagesArray.push(\r\n            <Page className=\"pdf-page\"\r\n                  pageNumber={i}\r\n                  key={`page-${i}`}\r\n                  renderAnnotationLayer={true}\r\n                  renderInteractiveForms={true}\r\n                  renderTextLayer={true}\r\n                  onRenderSuccess={onPageRenderSuccess}\r\n                  customTextRenderer={({height,  width, transform, scale, page, str}) => {\r\n                      /*\r\n                      height: height of text\r\n                      width: width of text\r\n                      transform: contain coordinates of text\r\n                      scale: will be used for coords. conversing\r\n                       */\r\n                      return str;\r\n                  }}\r\n            />\r\n        );\r\n    }\r\n\r\n    return pagesArray;\r\n}\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf: testPdf,\r\n            title: testPdf.name,\r\n            boundingBoxes: null,\r\n            renderedPages: 0,\r\n            error: null,\r\n            structureTree: {},\r\n            roleMap: {},\r\n            classMap: {},\r\n            activeTagName: null,\r\n            tagPath: null,\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.renderedPages === this.state.numPages) {\r\n            console.log('BBoxes', this.state.boundingBoxes);\r\n            this.setState({renderedPages: 0});\r\n        }\r\n    }\r\n\r\n    onDocumentLoadSuccess = (document) => {\r\n        console.log(document);\r\n        let structureTree = document._pdfInfo.structureTree || {};\r\n        document.getMetadata().then(({ info, metadata, contentDispositionFilename, }) => {\r\n            let { RoleMap, ClassMap, Title } = info;\r\n            let title = Title || this.state.pdf.name;\r\n            this.setState({\r\n                title,\r\n                structureTree,\r\n                roleMap: RoleMap || {},\r\n                classMap: ClassMap || {},\r\n            })\r\n        });\r\n        let {numPages} = document;\r\n        this.setState({ numPages });\r\n    };\r\n\r\n    onPageRenderSuccess = (page) => {\r\n        /*page.getOperatorList().then(data => {\r\n            let boundingBoxes = data.argsArray[data.argsArray.length - 1][0];\r\n            this.setState({\r\n                boundingBoxes:\r\n                    this.state.boundingBoxes && this.state.renderedPages !== 0  ?\r\n                        {...this.state.boundingBoxes, ...boundingBoxes} : boundingBoxes,\r\n                renderedPages: this.state.renderedPages + 1\r\n            })\r\n        });*/\r\n\r\n        page.getOperatorList().then((data) => {\r\n            let positionData = data.argsArray[data.argsArray.length - 1];\r\n            console.log('Data:', positionData);\r\n\r\n            let canvas = document.getElementsByTagName('canvas')[page.pageIndex];\r\n            let rect = canvas.getBoundingClientRect();\r\n\r\n            let div = document.createElement('div');\r\n            div.innerHTML = \"\";\r\n            div.style.top = rect.y + 'px';\r\n            div.style.left = rect.x + 'px';\r\n            div.style.height = rect.height + 'px';\r\n            div.style.width = rect.width + 'px';\r\n            div.style.position = 'absolute';\r\n            div.id = 'div' + page.pageIndex;\r\n            containerRef.appendChild(div);\r\n\r\n            div = document.getElementById('div' + page.pageIndex);\r\n            _.map(positionData, (position, mcid) => {\r\n                let child = document.createElement('div');\r\n                child.style.top = parseInt(canvas.style.height, 10) - position.y - position.height  + 'px';\r\n                child.style.left = position.x + 'px';\r\n                child.style.height = position.height + 'px';\r\n                child.style.width = position.width + 'px';\r\n                child.className = 'bbox';\r\n                child.setAttribute('data-mcid', mcid);\r\n            \tchild.title = mcid;\r\n                child.onmouseover = this.onBboxOver;\r\n                child.onmouseout  = this.onBboxOut;\r\n                div.appendChild(child);\r\n            })\r\n        });\r\n    }\r\n\r\n    onBboxOver = (e) => {\r\n        let mcid = parseInt(e.target.getAttribute('data-mcid'));\r\n        let { name, relatives, path } = this.getTagName(mcid);\r\n        let bboxTagname = e.target.getAttribute('data-tag-name');\r\n        let tagRoleMapPath = '';\r\n        if (!bboxTagname) {\r\n            e.target.setAttribute('data-tag-name', name);\r\n        }\r\n\r\n        relatives.forEach((elementMcid) => {\r\n            document.querySelector(`[data-mcid=\"${elementMcid}\"]`).classList.add('_hovered');\r\n        });\r\n\r\n        e.target.classList.add('_hovered');\r\n\r\n        if (this.state.roleMap[name]) {\r\n            tagRoleMapPath = '-> ' + this.state.roleMap[name].name;\r\n        }\r\n\r\n        this.setState({\r\n            activeTagName: `${name} ${tagRoleMapPath}`,\r\n            tagPath: path.join(' -> '),\r\n        });\r\n    }\r\n\r\n    onBboxOut = (e) => {\r\n        [...document.querySelectorAll('._hovered')].forEach((el) => {\r\n            el.classList.remove('_hovered');\r\n        });\r\n\r\n        this.setState({\r\n            activeTagName: '',\r\n            tagPath: '',\r\n        });\r\n    }\r\n\r\n    getTagName(mcid, tagNode = this.state.structureTree) {\r\n        let node = '';\r\n        let relatives = [];\r\n        let path = [];\r\n        Object.keys(tagNode).forEach((nodeName) => {\r\n            path = [nodeName];\r\n            if (tagNode[nodeName] === mcid) {\r\n                node = nodeName;\r\n            } else if (tagNode[nodeName] instanceof Array) {\r\n                if (tagNode[nodeName].includes(mcid)) {\r\n                    node = nodeName;\r\n                    relatives = this.getRelatives(tagNode[nodeName]);\r\n                } else {\r\n                    node = tagNode[nodeName].filter((nodeFromArray) => {\r\n                        if (!nodeFromArray) {\r\n                            return false;\r\n                        }\r\n                        return !!this.getTagName(mcid, nodeFromArray).name;\r\n                    })[0];\r\n                    if (node) {\r\n                        node = this.getTagName(mcid, node);\r\n                        relatives = node.relatives;\r\n                        path = [...path, ...node.path];\r\n                        node = node.name;\r\n                    }\r\n                }\r\n            } else if (tagNode[nodeName] instanceof Object) {\r\n                node = this.getTagName(mcid, tagNode[nodeName]);\r\n                relatives = node.relatives;\r\n                path = [...path, ...node.path];\r\n                node = node.name;\r\n            }\r\n        });\r\n\r\n        return {\r\n            name: node,\r\n            relatives,\r\n            path\r\n        };\r\n    }\r\n\r\n    getRelatives(arrayOfRelatives) {\r\n        let relatives = [];\r\n        arrayOfRelatives.forEach((relative) => {\r\n            if (!relative) return;\r\n            if (typeof relative === 'number') {\r\n                relatives.push(relative);\r\n            } else if (relative instanceof Array && relative.length) {\r\n                relatives = [\r\n                    ...relatives,\r\n                    ...this.getRelatives(relative)\r\n                ];\r\n            } else if (relative instanceof Object) {\r\n                relatives = [\r\n                    ...relatives,\r\n                    ...this.getRelatives(Object.entries(relative))\r\n                ];\r\n            }\r\n        });\r\n\r\n        return relatives;\r\n    }\r\n\r\n    uploadFile = (e) => {\r\n        let file = e.target.files[0];\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = this._onUploadEnd(file);\r\n\r\n        if (!file) {\r\n            this.setState({\r\n                pdf: null\r\n            });\r\n            return;\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    uploadPdf = () => {\r\n        uploadInputRef.click();\r\n    }\r\n\r\n    _onUploadEnd = (pdf) => {\r\n        document.getElementById('container').innerHTML = \"\";\r\n\r\n        this.setState({\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf\r\n        })\r\n    }\r\n\r\n    _setRef(node) {\r\n        uploadInputRef = node;\r\n    }\r\n\r\n    setContainerRef(node) {\r\n        containerRef = node;\r\n    }\r\n\r\n    onError = (e) => {\r\n        this.setState({\r\n           error: e.message\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { pageNumber, numPages, title } = this.state;\r\n\r\n        return (\r\n            <div className=\"App\">\r\n                <header className=\"App-header\">\r\n                    <button onClick={this.uploadPdf}>\r\n                        Upload other pdf\r\n                    </button>\r\n                    <input type='file' onChange={this.uploadFile.bind(this)} ref={this._setRef} style={{'display': 'none'}}/>\r\n                </header>\r\n                <article className=\"app-main-body\">\r\n                    <div className=\"pdf-data\">\r\n                        <p><b>Title: </b>{title}</p>\r\n                        <p><b>Number of pages: </b>{numPages}</p>\r\n                    </div>\r\n                    <div className=\"pdf-wrapper\">\r\n                        <Document file={this.state.pdf}\r\n                                  onLoadSuccess={this.onDocumentLoadSuccess}\r\n                                  options={{\r\n                                      cMapUrl: `//cdn.jsdelivr.net/npm/pdfjs-dist@${pdfjs.version}/cmaps/`,\r\n                                      cMapPacked: true,\r\n                                  }}\r\n                                  onLoadError={this.onError}\r\n                                  error={<div className=\"error-msg\">{this.state.error}</div> }\r\n                        >\r\n                            {Pages({ pageNumber, numPages, onPageRenderSuccess: this.onPageRenderSuccess })}\r\n                        </Document>\r\n                    </div>\r\n                </article>\r\n                <div id=\"container\" ref={this.setContainerRef}/>\r\n                <div id=\"tagInfo\">\r\n                    <div>\r\n                        <span className=\"tag-info-title\">Tag name: </span>{this.state.activeTagName}\r\n                    </div>\r\n                    <div>\r\n                        <span className=\"tag-info-title\">Tree path: </span>{this.state.tagPath}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}