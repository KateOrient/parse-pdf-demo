{"version":3,"sources":["files/demo_tags.pdf","../node_modules/pdfjs-dist/build sync","files/test_2.pdf","files/test.pdf","files/huge.pdf","components/PdfPage.js","components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","webpackEmptyContext","req","e","Error","code","keys","resolve","id","PdfPage","pageIndex","onPageRenderSuccess","className","pageNumber","renderAnnotationLayer","renderInteractiveForms","renderTextLayer","onRenderSuccess","customTextRenderer","height","width","transform","scale","page","str","disabledSize","Header","props","uploadInputRef","uploadTestPdf","size","file","testPdf","mediumPdf","bigPdf","hugePdf","onUploadSctrictFile","app-btn-pane","onClick","disabled","loading","click","type","onChange","onUploadFile","ref","node","style","pdfjs","GlobalWorkerOptions","workerSrc","refs","containerRef","activeTagName","tagPath","loadedPages","App","onDocumentLoadSuccess","document","console","log","structureTree","_pdfInfo","getMetadata","then","info","RoleMap","metadata","contentDispositionFilename","ClassMap","title","Title","state","pdf","name","setState","roleMap","classMap","numPages","getOperatorList","data","positionData","argsArray","length","bboxByPage","rect","getElementsByTagName","getBoundingClientRect","bboxCanvas","createElement","top","y","left","x","position","setAttribute","appendChild","ctx","getContext","translate","onmousemove","onBboxMove","canvas","target","clientX","offsetHeight","clientY","bboxList","getAttribute","clearRect","offsetWidth","strokeStyle","bboxCoords","isInBbox","strokeRect","fillDocData","files","reader","FileReader","onload","onUploadEnd","readAsArrayBuffer","getElementById","innerHTML","onError","error","message","boundingBoxes","renderedPages","this","pagesArray","push","key","mcid","tagNode","relatives","path","Object","forEach","nodeName","Array","includes","getRelatives","filter","nodeFromArray","getTagName","arrayOfRelatives","relative","entries","bbox","isX","isY","tagName","EMPTY","textContent","classList","remove","add","onLoadSuccess","options","cMapUrl","version","cMapPacked","onLoadError","getPages","setRef","display","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73103fb5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/demo_tags.a5053dd1.pdf\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 23;","module.exports = __webpack_public_path__ + \"static/media/test_2.abc38450.pdf\";","module.exports = __webpack_public_path__ + \"static/media/test.ba02e324.pdf\";","module.exports = __webpack_public_path__ + \"static/media/huge.6e4e83bb.pdf\";","import React from 'react';\r\nimport { Page } from \"react-pdf\";\r\n\r\nfunction PdfPage({ pageIndex, onPageRenderSuccess }) {\r\n    return (\r\n        <Page className=\"pdf-page\"\r\n              pageNumber={pageIndex}\r\n              renderAnnotationLayer={true}\r\n              renderInteractiveForms={true}\r\n              renderTextLayer={true}\r\n              onRenderSuccess={onPageRenderSuccess}\r\n              customTextRenderer={({height,  width, transform, scale, page, str}) => {\r\n                  /*\r\n                  height: height of text\r\n                  width: width of text\r\n                  transform: contain coordinates of text\r\n                  scale: will be used for coords. conversing\r\n                   */\r\n                  return str;\r\n              }}\r\n        />\r\n    );\r\n}\r\n\r\nexport default PdfPage;\r\n","import React from 'react';\r\n\r\nimport testPdf from '../files/demo_tags.pdf';\r\nimport mediumPdf from '../files/test_2.pdf';\r\nimport bigPdf from '../files/test.pdf';\r\nimport hugePdf from '../files/huge.pdf';\r\n\r\nlet disabledSize = 'small';\r\n\r\nfunction Header(props) {\r\n    let uploadInputRef;\r\n    function setUploadInputRef(node) {\r\n        uploadInputRef = node;\r\n    }\r\n\r\n    function onUploadPdfClick() {\r\n        uploadInputRef.click();\r\n    }\r\n\r\n    function uploadTestPdf(size) {\r\n        let file;\r\n        switch (size) {\r\n            case 'small':\r\n                file = testPdf;\r\n                break;\r\n            case 'medium':\r\n                file = mediumPdf;\r\n                break;\r\n            case 'big':\r\n                file = bigPdf;\r\n                break;\r\n            case 'huge':\r\n                file = hugePdf;\r\n                break;\r\n        }\r\n\r\n        return (e) => {\r\n            disabledSize = size;\r\n            props.onUploadSctrictFile(file);\r\n        };\r\n    }\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n            <section className=\"\"app-btn-pane>\r\n                <button onClick={uploadTestPdf('small')} className=\"app-btn\" disabled={disabledSize === 'small' || props.loading}>\r\n                    Small pdf\r\n                </button>\r\n                <button onClick={uploadTestPdf('medium')} className=\"app-btn\" disabled={disabledSize === 'medium' || props.loading}>\r\n                    Medium pdf\r\n                </button>\r\n                <button onClick={uploadTestPdf('big')} className=\"app-btn\" disabled={disabledSize === 'big' || props.loading}>\r\n                    Big pdf\r\n                </button>\r\n                <button onClick={uploadTestPdf('huge')} className=\"app-btn\" disabled={disabledSize === 'huge' || props.loading}>\r\n                    Huge pdf\r\n                </button>\r\n                <button onClick={onUploadPdfClick} className=\"app-btn\" disabled={props.loading}>\r\n                    Upload other pdf\r\n                </button>\r\n                <input type='file' onChange={props.onUploadFile} ref={setUploadInputRef} style={{'display': 'none'}}/>\r\n            </section>\r\n            <div className=\"pdf-loading\">\r\n                {props.loading ? 'Loading pdf...' : ''}\r\n            </div>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport { Document, pdfjs } from 'react-pdf';\r\nimport 'react-pdf/dist/Page/AnnotationLayer.css';\r\nimport testPdf from './files/demo_tags.pdf';\r\nimport _ from 'lodash';\r\n\r\nimport PdfPage from './components/PdfPage';\r\nimport Header from './components/Header';\r\nimport './scss/main.scss';\r\n\r\n//  Set pdf.js build\r\npdfjs.GlobalWorkerOptions.workerSrc = `pdf.worker.js`;\r\n//pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\nlet refs = {\r\n    containerRef: null,\r\n    activeTagName: null,\r\n    tagPath: null,\r\n};\r\n\r\nlet loadedPages = 0;\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf: testPdf,\r\n            title: testPdf.name,\r\n            boundingBoxes: null,\r\n            renderedPages: 0,\r\n            error: null,\r\n            structureTree: {},\r\n            roleMap: {},\r\n            classMap: {},\r\n            loading: true,\r\n            bboxByPage: {},\r\n        };\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.renderedPages === this.state.numPages) {\r\n            console.log('BBoxes', this.state.boundingBoxes);\r\n            this.setState({renderedPages: 0});\r\n        }\r\n    }\r\n\r\n    //  Init data of uploaded PDF\r\n    onDocumentLoadSuccess = (document) => {\r\n        console.log(document);\r\n        let structureTree = document._pdfInfo.structureTree || {};\r\n        document.getMetadata().then(({ info, metadata, contentDispositionFilename, }) => {\r\n            let { RoleMap, ClassMap, Title } = info;\r\n            let title = Title || this.state.pdf.name;\r\n            this.setState({\r\n                title,\r\n                structureTree,\r\n                roleMap: RoleMap || {},\r\n                classMap: ClassMap || {},\r\n            })\r\n        });\r\n        let {numPages} = document;\r\n        this.setState({ numPages });\r\n    };\r\n\r\n    //  Create page overlay for BBOXes\r\n    onPageRenderSuccess = (page) => {\r\n        page.getOperatorList().then((data) => {\r\n            let positionData = data.argsArray[data.argsArray.length - 1];\r\n            let bboxByPage = { ...this.state.bboxByPage };\r\n            bboxByPage[page.pageIndex] = positionData;\r\n            //console.log('Data:', positionData);\r\n\r\n            let canvas = document.getElementsByTagName('canvas')[page.pageIndex];\r\n            let rect = canvas.getBoundingClientRect();\r\n\r\n            let bboxCanvas = document.createElement('canvas');\r\n            bboxCanvas.style.top = rect.y + 'px';\r\n            bboxCanvas.style.left = rect.x + 'px';\r\n            bboxCanvas.style.height = rect.height + 'px';\r\n            bboxCanvas.style.width = rect.width + 'px';\r\n            bboxCanvas.height = rect.height;\r\n            bboxCanvas.width = rect.width;\r\n            bboxCanvas.style.position = 'absolute';\r\n            bboxCanvas.id = 'bboxCanvas' + page.pageIndex;\r\n            bboxCanvas.setAttribute('data-page', page.pageIndex);\r\n            refs.containerRef.appendChild(bboxCanvas);\r\n            let ctx = bboxCanvas.getContext('2d');\r\n            ctx.translate(0, rect.height);   // reset where 0,0 is located\r\n            ctx.scale(1,-1);\r\n\r\n            bboxCanvas.onmousemove = this.onBboxMove;\r\n\r\n            loadedPages++;\r\n            if (loadedPages === this.state.numPages) {\r\n                this.setState({\r\n                    loading: false,\r\n                    bboxByPage,\r\n                });\r\n            } else {\r\n                this.state.bboxByPage = bboxByPage;\r\n            }\r\n        });\r\n    }\r\n\r\n    //  Build pages\r\n    getPages() {\r\n        let pagesArray = [];\r\n        let { numPages } = this.state;\r\n\r\n        for (let pageIndex = 1; pageIndex <= numPages; pageIndex++) {\r\n            pagesArray.push(\r\n                <PdfPage pageIndex={pageIndex}\r\n                         onPageRenderSuccess={this.onPageRenderSuccess}\r\n                         key={`page-${pageIndex}`}\r\n                />\r\n            );\r\n        }\r\n\r\n        return pagesArray;\r\n    }\r\n\r\n    /*\r\n     * Get tag name of hovered bbox\r\n     * @param mcid {integer} id of bbox\r\n     * @param tagNode {object} structure for searching\r\n     *\r\n     * @return {\r\n     *      name {string} tag name\r\n     *      relatives {array} tags from the same level\r\n     *      path {string} path to component through structure tree\r\n     * }\r\n     */\r\n    getTagName(mcid, tagNode = this.state.structureTree) {\r\n        let node = '';\r\n        let relatives = [];\r\n        let path = [];\r\n        Object.keys(tagNode).forEach((nodeName) => {\r\n            path = [nodeName];\r\n            if (tagNode[nodeName] === mcid) {\r\n                node = nodeName;\r\n            } else if (tagNode[nodeName] instanceof Array) {\r\n                if (tagNode[nodeName].includes(mcid)) {\r\n                    node = nodeName;\r\n                    relatives = this.getRelatives(tagNode[nodeName]);\r\n                } else {\r\n                    node = tagNode[nodeName].filter((nodeFromArray) => {\r\n                        if (!nodeFromArray) {\r\n                            return false;\r\n                        }\r\n                        return !!this.getTagName(mcid, nodeFromArray).name;\r\n                    })[0];\r\n                    if (node) {\r\n                        node = this.getTagName(mcid, node);\r\n                        relatives = node.relatives;\r\n                        path = [...path, ...node.path];\r\n                        node = node.name;\r\n                    }\r\n                }\r\n            } else if (tagNode[nodeName] instanceof Object) {\r\n                node = this.getTagName(mcid, tagNode[nodeName]);\r\n                relatives = node.relatives;\r\n                path = [...path, ...node.path];\r\n                node = node.name;\r\n            }\r\n        });\r\n\r\n        return {\r\n            name: node,\r\n            relatives,\r\n            path\r\n        };\r\n    }\r\n\r\n    //  Get components from on level\r\n    getRelatives(arrayOfRelatives) {\r\n        let relatives = [];\r\n        arrayOfRelatives.forEach((relative) => {\r\n            if (!relative) return;\r\n            if (typeof relative === 'number') {\r\n                relatives.push(relative);\r\n            } else if (relative instanceof Array && relative.length) {\r\n                relatives = [\r\n                    ...relatives,\r\n                    ...this.getRelatives(relative)\r\n                ];\r\n            } else if (relative instanceof Object) {\r\n                relatives = [\r\n                    ...relatives,\r\n                    ...this.getRelatives(Object.entries(relative))\r\n                ];\r\n            }\r\n        });\r\n\r\n        return relatives;\r\n    }\r\n\r\n    //  Set React ref\r\n    setRef(target) {\r\n        return (node) => {\r\n            refs[target] = node;\r\n        };\r\n    }\r\n\r\n    isInBbox({x, y, bboxList}) {\r\n        let bbox = false;\r\n        Object.keys(bboxList).forEach((key) => {\r\n            let isX = x >= bboxList[key].x && x <= (bboxList[key].x + bboxList[key].width);\r\n            let isY = y >= bboxList[key].y && y <= (bboxList[key].y + bboxList[key].height);\r\n\r\n            if (isX && isY) {\r\n                bbox = {\r\n                    ...bboxList[key],\r\n                    mcid: key,\r\n                };\r\n            }\r\n        });\r\n\r\n        return bbox;\r\n    }\r\n\r\n    /*\r\n    *   HANDLERS\r\n     */\r\n\r\n    onBboxMove = (e) => {\r\n        let canvas = e.target;\r\n        let rect = canvas.getBoundingClientRect();\r\n        let x = e.clientX - rect.left;\r\n        let y = canvas.offsetHeight - (e.clientY - rect.top);\r\n        let ctx = canvas.getContext('2d');\r\n        let bboxList = this.state.bboxByPage[canvas.getAttribute('data-page')];\r\n\r\n        ctx.clearRect(0, 0, canvas.offsetWidth, canvas.offsetHeight);\r\n        ctx.strokeStyle = 'red';\r\n        let bboxCoords = this.isInBbox({ x, y, bboxList});\r\n        if (!bboxCoords) {\r\n            this.fillDocData();\r\n            return;\r\n        }\r\n\r\n        /*let mcid = parseInt(bboxCoords.mcid);\r\n        let { name, relatives, path } = this.getTagName(mcid);\r\n        let tagRoleMapPath = '';\r\n        let minX = 0;\r\n        let maxX = 0;\r\n        let minY = 0;\r\n        let maxY = 0;\r\n        delete relatives[mcid];\r\n        relatives.forEach((elementMcid, index) => {\r\n            let { x, y, width, height } = bboxList[elementMcid];\r\n            if (!index) {\r\n                minX = x;\r\n                maxX = x + width;\r\n                minY = y;\r\n                maxY = y + height;\r\n            }\r\n\r\n            minX = minX < x ? minX : x;\r\n            maxX = maxX > (x + width) ? maxX : (x + width);\r\n            minY = minY < y ? minY : y;\r\n            maxY = maxY > (y + height) ? maxY : (y + height);\r\n        });\r\n\r\n        if (relatives.length) {\r\n            ctx.strokeRect(minX, minY, maxX-minX, maxY-minY);\r\n        } else {*/\r\n            ctx.strokeRect(bboxCoords.x, bboxCoords.y, bboxCoords.width, bboxCoords.height);\r\n        /*}\r\n\r\n        if (this.state.roleMap[name]) {\r\n            tagRoleMapPath = '-> ' + this.state.roleMap[name].name;\r\n        }\r\n\r\n        this.fillDocData(`${name} ${tagRoleMapPath}`, path.join(' -> '));*/\r\n    }\r\n\r\n    fillDocData(tagName = null, tagPath = null) {\r\n        const EMPTY = 'None';\r\n\r\n        if (tagName) {\r\n            refs.activeTagName.textContent = tagName;\r\n            refs.tagPath.classList.remove('_empty');\r\n        } else {\r\n            refs.activeTagName.textContent = EMPTY;\r\n            refs.tagPath.classList.add('_empty');\r\n        }\r\n\r\n        if (tagPath) {\r\n            refs.tagPath.textContent = tagPath;\r\n            refs.activeTagName.classList.remove('_empty');\r\n        } else {\r\n            refs.tagPath.textContent = EMPTY;\r\n            refs.activeTagName.classList.add('_empty');\r\n        }\r\n    }\r\n\r\n    onUploadFile = (e) => {\r\n        loadedPages = 0;\r\n        this.setState({\r\n            loading: true,\r\n            bboxByPage: {},\r\n        });\r\n        let file = e.target.files[0];\r\n        let reader = new FileReader();\r\n\r\n        reader.onload = this.onUploadEnd(file);\r\n\r\n        if (!file) {\r\n            this.setState({\r\n                pdf: null,\r\n                loading: false,\r\n            });\r\n            return;\r\n        }\r\n        reader.readAsArrayBuffer(file);\r\n    }\r\n\r\n    onUploadSctrictFile = (pdf) => {\r\n        loadedPages = 0;\r\n        this.setState({\r\n            loading: true,\r\n            bboxByPage: {},\r\n        });\r\n        this.onUploadEnd(pdf);\r\n    }\r\n\r\n    onUploadEnd = (pdf) => {\r\n        document.getElementById('container').innerHTML = \"\";\r\n\r\n        this.setState({\r\n            numPages: null,\r\n            pageNumber: 1,\r\n            pdf,\r\n        })\r\n    }\r\n\r\n    onError = (e) => {\r\n        this.setState({\r\n            error: e.message,\r\n            loading: false,\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const { numPages, title, loading } = this.state;\r\n        return (\r\n            <div className={`App ${loading ? '_loading' : ''}`}>\r\n                <Header onUploadFile={this.onUploadFile} onUploadSctrictFile={this.onUploadSctrictFile} loading={loading}/>\r\n                <main className=\"app-main-body\">\r\n                    <div className=\"pdf-wrapper\">\r\n                        <Document file={this.state.pdf}\r\n                                  onLoadSuccess={this.onDocumentLoadSuccess}\r\n                                  options={{\r\n                                      cMapUrl: `//cdn.jsdelivr.net/npm/pdfjs-dist@${pdfjs.version}/cmaps/`,\r\n                                      cMapPacked: true,\r\n                                  }}\r\n                                  onLoadError={this.onError}\r\n                                  error={<div className=\"error-msg\">{this.state.error}</div> }\r\n                        >\r\n                            {this.getPages()}\r\n                        </Document>\r\n                    </div>\r\n                </main>\r\n                <div id=\"container\" ref={this.setRef('containerRef')}/>\r\n                <div id=\"tagInfo\" style={{display: 'none'}}>\r\n                    <div className=\"tag-prop\">\r\n                        <div className=\"tag-info-title\">Document title</div>\r\n                        <div ref={this.setRef('activeTagName')} className={title ? '' : '_empty'}>{title || 'None'}</div>\r\n                    </div>\r\n                    <div className=\"tag-prop\">\r\n                        <div className=\"tag-info-title\">Number of pages</div>\r\n                        <div ref={this.setRef('activeTagName')}>{numPages}</div>\r\n                    </div>\r\n                    <div className=\"tag-prop\">\r\n                        <div className=\"tag-info-title\">Tag name</div>\r\n                        <div ref={this.setRef('activeTagName')} className=\"_empty\">None</div>\r\n                    </div>\r\n                    <div className=\"tag-prop\">\r\n                        <div className=\"tag-info-title\">Tree path</div>\r\n                        <div ref={this.setRef('tagPath')} className=\"_empty\">None</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}